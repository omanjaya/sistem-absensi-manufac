<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
// use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasFactory, Notifiable, HasApiTokens;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'employee_id',
        'nip',
        'phone',
        'address',
        'birth_date',
        'gender',
        'department',
        'position',
        'role',
        'status',
        'join_date',
        'avatar',
        'basic_salary',
        'education',
        'university',
        'allowance',
        'two_factor_enabled',
        'two_factor_secret',
        'two_factor_phone',
        'two_factor_verified_at',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'join_date' => 'date',
            'birth_date' => 'date',
            'basic_salary' => 'decimal:2',
            'allowance' => 'decimal:2',
        ];
    }

    /**
     * Check if user is admin
     */
    public function isAdmin(): bool
    {
        return $this->role === 'admin';
    }

    /**
     * Check if user is employee
     */
    public function isEmployee(): bool
    {
        return $this->role === 'employee';
    }

    /**
     * Check if user is active
     */
    public function isActive(): bool
    {
        return $this->status === 'active';
    }

    /**
     * Get user's attendances
     */
    public function attendances()
    {
        return $this->hasMany(Attendance::class);
    }

    /**
     * Get user's leaves
     */
    public function leaves()
    {
        return $this->hasMany(Leave::class);
    }

    /**
     * Get user's salaries
     */
    public function salaries()
    {
        return $this->hasMany(Salary::class);
    }

    /**
     * Get leaves approved by this user (for admins)
     */
    public function approvedLeaves()
    {
        return $this->hasMany(Leave::class, 'approved_by');
    }

    /**
     * Get salaries generated by this user (for admins)
     */
    public function generatedSalaries()
    {
        return $this->hasMany(Salary::class, 'generated_by');
    }

    /**
     * Get today's attendance
     */
    public function todayAttendance()
    {
        return $this->attendances()->whereDate('date', today());
    }

    /**
     * Get this month's attendances
     */
    public function thisMonthAttendances()
    {
        return $this->attendances()
            ->whereYear('date', now()->year)
            ->whereMonth('date', now()->month);
    }

    /**
     * Get avatar URL
     */
    public function getAvatarUrlAttribute(): ?string
    {
        if ($this->avatar) {
            return asset('storage/avatars/' . $this->avatar);
        }
        return null;
    }

    /**
     * Get the user's notifications
     */
    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    /**
     * Get the user's analytics
     */
    public function analytics()
    {
        return $this->hasMany(Analytics::class);
    }

    /**
     * Get the user's audit logs
     */
    public function auditLogs()
    {
        return $this->hasMany(AuditLog::class);
    }

    /**
     * Get the user's device tokens
     */
    public function deviceTokens()
    {
        return $this->hasMany(DeviceToken::class);
    }

    /**
     * Generate employee ID if not provided
     */
    protected static function boot()
    {
        parent::boot();

        static::creating(function ($user) {
            if (empty($user->employee_id)) {
                $user->employee_id = 'EMP' . str_pad(
                    static::count() + 1,
                    4,
                    '0',
                    STR_PAD_LEFT
                );
            }
        });
    }
}
