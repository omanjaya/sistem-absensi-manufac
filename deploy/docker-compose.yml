version: "3.8"

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: absensi_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: absensi_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: absensi_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: absensi_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Laravel Backend API
  backend:
    build:
      context: ../backend-api
      dockerfile: ../deploy/Dockerfile.laravel
    container_name: absensi_backend
    restart: unless-stopped
    environment:
      APP_NAME: "Sistem Absensi API"
      APP_ENV: production
      APP_DEBUG: false
      APP_URL: http://localhost:8000
      DB_CONNECTION: pgsql
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: absensi_db
      DB_USERNAME: postgres
      DB_PASSWORD: absensi_password
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FACE_SERVICE_URL: http://face-server:5000
      OFFICE_LATITUDE: -6.2088
      OFFICE_LONGITUDE: 106.8456
      OFFICE_RADIUS: 100
      SANCTUM_STATEFUL_DOMAINS: localhost:3000,127.0.0.1:3000
    volumes:
      - backend_storage:/var/www/html/storage
      - backend_public:/var/www/html/public
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Face Recognition Server
  face-server:
    build:
      context: ../face-server
      dockerfile: ../deploy/Dockerfile.flask
    container_name: absensi_face_server
    restart: unless-stopped
    environment:
      FLASK_HOST: 0.0.0.0
      FLASK_PORT: 5000
      FLASK_DEBUG: false
      FACE_DATA_DIR: /app/face_data
      RECOGNITION_TOLERANCE: 0.6
      FACE_QUALITY_THRESHOLD: 0.8
      LOG_LEVEL: INFO
    volumes:
      - face_data:/app/face_data
    ports:
      - "5000:5000"
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue.js Frontend
  frontend:
    build:
      context: ../frontend-web
      dockerfile: ../deploy/Dockerfile.vue
    container_name: absensi_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_LARAVEL_API_URL: http://localhost:8000/api
      VITE_FLASK_AI_URL: http://localhost:5000
      VITE_APP_NAME: "Sistem Absensi Wajah"
      VITE_OFFICE_LATITUDE: -6.2088
      VITE_OFFICE_LONGITUDE: 106.8456
      VITE_OFFICE_RADIUS: 100
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - face-server
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: absensi_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./ssl:/etc/nginx/ssl
      - backend_public:/var/www/html/public
    depends_on:
      - frontend
      - backend
      - face-server
    networks:
      - absensi_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  face_data:
    driver: local
  backend_storage:
    driver: local
  backend_public:
    driver: local

networks:
  absensi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
